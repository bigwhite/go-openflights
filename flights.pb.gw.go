// Code generated by protoc-gen-grpc-gateway
// source: flights.proto
// DO NOT EDIT!

package openflights

import (
	"encoding/json"
	"io"
	"net/http"

	"github.com/gengo/grpc-gateway/runtime"
	"github.com/gengo/grpc-gateway/utilities"
	"github.com/golang/glog"
	"github.com/golang/protobuf/proto"
	"go.pedge.io/google-protobuf"
	"golang.org/x/net/context"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
)

var _ codes.Code
var _ io.Reader
var _ = runtime.String
var _ = json.Marshal
var _ = utilities.PascalFromSnake

func request_API_GetAllAirports_0(ctx context.Context, client APIClient, req *http.Request, pathParams map[string]string) (proto.Message, error) {
	var protoReq google_protobuf.Empty

	return client.GetAllAirports(ctx, &protoReq)
}

func request_API_GetAllAirlines_0(ctx context.Context, client APIClient, req *http.Request, pathParams map[string]string) (proto.Message, error) {
	var protoReq google_protobuf.Empty

	return client.GetAllAirlines(ctx, &protoReq)
}

func request_API_GetAllRoutes_0(ctx context.Context, client APIClient, req *http.Request, pathParams map[string]string) (proto.Message, error) {
	var protoReq google_protobuf.Empty

	return client.GetAllRoutes(ctx, &protoReq)
}

func request_API_GetAirportByID_0(ctx context.Context, client APIClient, req *http.Request, pathParams map[string]string) (proto.Message, error) {
	var protoReq GetAirportByIDRequest

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["id"]
	if !ok {
		return nil, grpc.Errorf(codes.InvalidArgument, "missing parameter %s", "id")
	}

	protoReq.Id, err = runtime.String(val)

	if err != nil {
		return nil, err
	}

	return client.GetAirportByID(ctx, &protoReq)
}

func request_API_GetAirlineByID_0(ctx context.Context, client APIClient, req *http.Request, pathParams map[string]string) (proto.Message, error) {
	var protoReq GetAirlineByIDRequest

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["id"]
	if !ok {
		return nil, grpc.Errorf(codes.InvalidArgument, "missing parameter %s", "id")
	}

	protoReq.Id, err = runtime.String(val)

	if err != nil {
		return nil, err
	}

	return client.GetAirlineByID(ctx, &protoReq)
}

func request_API_GetRouteByID_0(ctx context.Context, client APIClient, req *http.Request, pathParams map[string]string) (proto.Message, error) {
	var protoReq GetRouteByIDRequest

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["id"]
	if !ok {
		return nil, grpc.Errorf(codes.InvalidArgument, "missing parameter %s", "id")
	}

	protoReq.Id, err = runtime.String(val)

	if err != nil {
		return nil, err
	}

	return client.GetRouteByID(ctx, &protoReq)
}

func request_API_GetDistanceByID_0(ctx context.Context, client APIClient, req *http.Request, pathParams map[string]string) (proto.Message, error) {
	var protoReq GetDistanceByIDRequest

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["source_airport_id"]
	if !ok {
		return nil, grpc.Errorf(codes.InvalidArgument, "missing parameter %s", "source_airport_id")
	}

	protoReq.SourceAirportId, err = runtime.String(val)

	if err != nil {
		return nil, err
	}

	val, ok = pathParams["destination_airport_id"]
	if !ok {
		return nil, grpc.Errorf(codes.InvalidArgument, "missing parameter %s", "destination_airport_id")
	}

	protoReq.DestinationAirportId, err = runtime.String(val)

	if err != nil {
		return nil, err
	}

	return client.GetDistanceByID(ctx, &protoReq)
}

func request_API_GetAirportByCode_0(ctx context.Context, client APIClient, req *http.Request, pathParams map[string]string) (proto.Message, error) {
	var protoReq GetAirportByCodeRequest

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["code"]
	if !ok {
		return nil, grpc.Errorf(codes.InvalidArgument, "missing parameter %s", "code")
	}

	protoReq.Code, err = runtime.String(val)

	if err != nil {
		return nil, err
	}

	return client.GetAirportByCode(ctx, &protoReq)
}

func request_API_GetAirlineByCode_0(ctx context.Context, client APIClient, req *http.Request, pathParams map[string]string) (proto.Message, error) {
	var protoReq GetAirlineByCodeRequest

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["code"]
	if !ok {
		return nil, grpc.Errorf(codes.InvalidArgument, "missing parameter %s", "code")
	}

	protoReq.Code, err = runtime.String(val)

	if err != nil {
		return nil, err
	}

	return client.GetAirlineByCode(ctx, &protoReq)
}

func request_API_GetRoutesByCode_0(ctx context.Context, client APIClient, req *http.Request, pathParams map[string]string) (proto.Message, error) {
	var protoReq GetRoutesByCodeRequest

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["airline_code"]
	if !ok {
		return nil, grpc.Errorf(codes.InvalidArgument, "missing parameter %s", "airline_code")
	}

	protoReq.AirlineCode, err = runtime.String(val)

	if err != nil {
		return nil, err
	}

	val, ok = pathParams["source_airport_code"]
	if !ok {
		return nil, grpc.Errorf(codes.InvalidArgument, "missing parameter %s", "source_airport_code")
	}

	protoReq.SourceAirportCode, err = runtime.String(val)

	if err != nil {
		return nil, err
	}

	val, ok = pathParams["destination_airport_code"]
	if !ok {
		return nil, grpc.Errorf(codes.InvalidArgument, "missing parameter %s", "destination_airport_code")
	}

	protoReq.DestinationAirportCode, err = runtime.String(val)

	if err != nil {
		return nil, err
	}

	return client.GetRoutesByCode(ctx, &protoReq)
}

func request_API_GetDistanceByCode_0(ctx context.Context, client APIClient, req *http.Request, pathParams map[string]string) (proto.Message, error) {
	var protoReq GetDistanceByCodeRequest

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["source_airport_code"]
	if !ok {
		return nil, grpc.Errorf(codes.InvalidArgument, "missing parameter %s", "source_airport_code")
	}

	protoReq.SourceAirportCode, err = runtime.String(val)

	if err != nil {
		return nil, err
	}

	val, ok = pathParams["destination_airport_code"]
	if !ok {
		return nil, grpc.Errorf(codes.InvalidArgument, "missing parameter %s", "destination_airport_code")
	}

	protoReq.DestinationAirportCode, err = runtime.String(val)

	if err != nil {
		return nil, err
	}

	return client.GetDistanceByCode(ctx, &protoReq)
}

// RegisterAPIHandlerFromEndpoint is same as RegisterAPIHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterAPIHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string) (err error) {
	conn, err := grpc.Dial(endpoint, grpc.WithInsecure())
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				glog.Errorf("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				glog.Errorf("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterAPIHandler(ctx, mux, conn)
}

// RegisterAPIHandler registers the http handlers for service API to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterAPIHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	client := NewAPIClient(conn)

	mux.Handle("GET", pattern_API_GetAllAirports_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		resp, err := request_API_GetAllAirports_0(runtime.AnnotateContext(ctx, req), client, req, pathParams)
		if err != nil {
			runtime.HTTPError(ctx, w, err)
			return
		}

		forward_API_GetAllAirports_0(ctx, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_API_GetAllAirlines_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		resp, err := request_API_GetAllAirlines_0(runtime.AnnotateContext(ctx, req), client, req, pathParams)
		if err != nil {
			runtime.HTTPError(ctx, w, err)
			return
		}

		forward_API_GetAllAirlines_0(ctx, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_API_GetAllRoutes_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		resp, err := request_API_GetAllRoutes_0(runtime.AnnotateContext(ctx, req), client, req, pathParams)
		if err != nil {
			runtime.HTTPError(ctx, w, err)
			return
		}

		forward_API_GetAllRoutes_0(ctx, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_API_GetAirportByID_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		resp, err := request_API_GetAirportByID_0(runtime.AnnotateContext(ctx, req), client, req, pathParams)
		if err != nil {
			runtime.HTTPError(ctx, w, err)
			return
		}

		forward_API_GetAirportByID_0(ctx, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_API_GetAirlineByID_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		resp, err := request_API_GetAirlineByID_0(runtime.AnnotateContext(ctx, req), client, req, pathParams)
		if err != nil {
			runtime.HTTPError(ctx, w, err)
			return
		}

		forward_API_GetAirlineByID_0(ctx, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_API_GetRouteByID_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		resp, err := request_API_GetRouteByID_0(runtime.AnnotateContext(ctx, req), client, req, pathParams)
		if err != nil {
			runtime.HTTPError(ctx, w, err)
			return
		}

		forward_API_GetRouteByID_0(ctx, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_API_GetDistanceByID_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		resp, err := request_API_GetDistanceByID_0(runtime.AnnotateContext(ctx, req), client, req, pathParams)
		if err != nil {
			runtime.HTTPError(ctx, w, err)
			return
		}

		forward_API_GetDistanceByID_0(ctx, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_API_GetAirportByCode_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		resp, err := request_API_GetAirportByCode_0(runtime.AnnotateContext(ctx, req), client, req, pathParams)
		if err != nil {
			runtime.HTTPError(ctx, w, err)
			return
		}

		forward_API_GetAirportByCode_0(ctx, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_API_GetAirlineByCode_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		resp, err := request_API_GetAirlineByCode_0(runtime.AnnotateContext(ctx, req), client, req, pathParams)
		if err != nil {
			runtime.HTTPError(ctx, w, err)
			return
		}

		forward_API_GetAirlineByCode_0(ctx, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_API_GetRoutesByCode_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		resp, err := request_API_GetRoutesByCode_0(runtime.AnnotateContext(ctx, req), client, req, pathParams)
		if err != nil {
			runtime.HTTPError(ctx, w, err)
			return
		}

		forward_API_GetRoutesByCode_0(ctx, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_API_GetDistanceByCode_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		resp, err := request_API_GetDistanceByCode_0(runtime.AnnotateContext(ctx, req), client, req, pathParams)
		if err != nil {
			runtime.HTTPError(ctx, w, err)
			return
		}

		forward_API_GetDistanceByCode_0(ctx, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_API_GetAllAirports_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0}, []string{"airports"}, ""))

	pattern_API_GetAllAirlines_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0}, []string{"airlines"}, ""))

	pattern_API_GetAllRoutes_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0}, []string{"routes"}, ""))

	pattern_API_GetAirportByID_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 1, 5, 1}, []string{"airports", "id"}, ""))

	pattern_API_GetAirlineByID_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 1, 5, 1}, []string{"airlines", "id"}, ""))

	pattern_API_GetRouteByID_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 1, 5, 1}, []string{"routes", "id"}, ""))

	pattern_API_GetDistanceByID_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 1, 5, 2, 1, 0, 4, 1, 5, 3}, []string{"distance", "id", "source_airport_id", "destination_airport_id"}, ""))

	pattern_API_GetAirportByCode_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 1, 5, 1}, []string{"airports", "code"}, ""))

	pattern_API_GetAirlineByCode_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 1, 5, 1}, []string{"airlines", "code"}, ""))

	pattern_API_GetRoutesByCode_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 1, 5, 2, 1, 0, 4, 1, 5, 3, 1, 0, 4, 1, 5, 4}, []string{"routes", "code", "airline_code", "source_airport_code", "destination_airport_code"}, ""))

	pattern_API_GetDistanceByCode_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 1, 5, 2, 1, 0, 4, 1, 5, 3}, []string{"distance", "code", "source_airport_code", "destination_airport_code"}, ""))
)

var (
	forward_API_GetAllAirports_0 = runtime.ForwardResponseMessage

	forward_API_GetAllAirlines_0 = runtime.ForwardResponseMessage

	forward_API_GetAllRoutes_0 = runtime.ForwardResponseMessage

	forward_API_GetAirportByID_0 = runtime.ForwardResponseMessage

	forward_API_GetAirlineByID_0 = runtime.ForwardResponseMessage

	forward_API_GetRouteByID_0 = runtime.ForwardResponseMessage

	forward_API_GetDistanceByID_0 = runtime.ForwardResponseMessage

	forward_API_GetAirportByCode_0 = runtime.ForwardResponseMessage

	forward_API_GetAirlineByCode_0 = runtime.ForwardResponseMessage

	forward_API_GetRoutesByCode_0 = runtime.ForwardResponseMessage

	forward_API_GetDistanceByCode_0 = runtime.ForwardResponseMessage
)
