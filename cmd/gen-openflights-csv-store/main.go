package main

import (
	"fmt"
	"os"
	"text/template"

	"go.pedge.io/flights"
	"go.pedge.io/flights/cmd/internal/common"
)

var (
	csvTmpl = template.Must(template.New("csvTmpl").Parse(`
{{$import := .Import}}
{{$package := .Package}}
{{$packagePrefix := .PackagePrefix}}
{{$private := .Private}}
{{$data := .Data}}
// Code generated by gen-flights
// DO NOT EDIT!

package {{$package}}
{{$import}}

var (
	{{if not $private}}// GlobalCSVStore is the generated *{{$packagePrefix}}CSVStore for all flights information.
	{{end}}{{if $private}}_{{end}}GlobalCSVStore = &{{$packagePrefix}}CSVStore{
		Airports: []byte(` + "`\n" + "{{$data.Airports}}" + "`" + `),
		Airlines: []byte(` + "`\n" + "{{$data.Airlines}}" + "`" + `),
		Routes: []byte(` + "`\n" + "{{$data.Routes}}" + "`" + `),
	}
)
`))
)

type csvStringStore struct {
	Airports string
	Airlines string
	Routes   string
}

func main() {
	if err := do(); err != nil {
		fmt.Fprintf(os.Stderr, "%s\n", err.Error())
		os.Exit(1)
	}
	os.Exit(0)
}

func do() error {
	if len(os.Args) != 3 {
		return fmt.Errorf("usage: %s package path/to/out.go", os.Args[0])
	}
	pkg := os.Args[1]
	outFilePath := os.Args[2]
	csvStore, err := flights.GetCSVStore()
	if err != nil {
		return err
	}
	return common.WriteData(pkg, outFilePath, csvTmpl, newCSVStringStore(csvStore))
}

func newCSVStringStore(csvStore *flights.CSVStore) *csvStringStore {
	return &csvStringStore{
		string(csvStore.Airports),
		string(csvStore.Airlines),
		string(csvStore.Routes),
	}
}
